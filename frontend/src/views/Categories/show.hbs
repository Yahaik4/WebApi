<div class="d-flex justify-content-center align-items-center vh-100">  
    
    <div id="modalCreate" class="modal " tabindex="-1">
        <div class="d-flex justify-content-center align-items-center">
            <div class="rightSession border rounded p-3 shadow mt-5 tm-bg-primary-dark position-relative" style="width: 450px;">
                <form id="formCreate" method="post" class="p-2 d-flex flex-column justify-content-around gap-2 " novalidate>
                    <button type="button" class="btn-close position-absolute top-0 end-0 p-3 text-white" aria-label="Close" data-bs-dismiss="modal" data-dismiss="modal"></button>
                    <h1 class="text-white">Create Category</h1>                
                    <div class="mb-3 ">
                        <label for="nameCreate" class="form-label text-white">Enter name</label>
                        <input type="text" class="form-control" id="nameCreate" aria-describedby="emailHelp" name="name" required="off">
                    </div>

                    <div class="alert alert-danger" style="display: none;">
                        Vui lòng nhập đầy đủ thông tin
                    </div>

                    {{#if err}}
                        <div class="alert alert-danger">
                            {{err}}
                        </div>
                    {{/if}}

                    <button type="submit" class="btn btn-primary w-100">Create</button>
                </form>
            </div>
        </div>
    </div>

    <div id="modalEdit" class="modal " tabindex="-1">
        <div class="d-flex justify-content-center align-items-center">
            <div class="rightSession border rounded p-3 shadow mt-5 tm-bg-primary-dark position-relative" style="width: 450px;">
                <form id="editForm" method="post" action="/category/edit/{{product._id}}?_method=PUT"  class="p-2 d-flex flex-column justify-content-around gap-2 " novalidate>
                    <button type="button" class="btn-close position-absolute top-0 end-0 p-3 text-white" aria-label="Close" data-bs-dismiss="modal" data-dismiss="modal"></button>
                    <h1 class="text-white">Edit Category</h1>                
                    <div class="mb-3 ">
                        <label for="exampleInputEmail1" class="form-label text-white">Enter name</label>
                        <input type="text" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp" name="name" required="off" value="{{category.name}}">
                    </div>

                    <div class="alert alert-danger" style="display: none;">
                        Vui lòng nhập đầy đủ thông tin
                    </div>

                    {{#if err}}
                        <div class="alert alert-danger">
                            {{err}}
                        </div>
                    {{/if}}

                    <button id="btnEdit" type="submit" class="btn btn-primary w-100">Edit</button>
                </form>
            </div>
        </div>
    </div>

    <div id="modalDelete" class="modal " tabindex="-1">
        <div class="d-flex justify-content-center align-items-center">
            <div class="rightSession border rounded p-3 shadow mt-5 tm-bg-primary-dark position-relative" style="width: 450px;">
                <form id="editForm" method="post" action="/category/edit/{{product._id}}?_method=PUT"  class="p-2 d-flex flex-column justify-content-around gap-2 " novalidate>
                    <button type="button" class="btn-close position-absolute top-0 end-0 p-3 text-white" aria-label="Close" data-bs-dismiss="modal" data-dismiss="modal"></button>
                    <div class="modal-header">
                        <h5 class="modal-title text-white" id="exampleModalLabel">CONFIRM</h5>             
                    </div>

                    <div class="modal-body text-white">
                        Bạn có chắc chắn muốn xóa
                    </div>
                    <div class="modal-footer">
                        <button id="btnDelete" type="button" class="btn btn-danger">Xóa bỏ</button>
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    </div>
                    <div class="alert alert-danger" style="display: none;">
                        Vui lòng nhập đầy đủ thông tin
                    </div>

                    {{#if err}}
                        <div class="alert alert-danger">
                            {{err}}
                        </div>
                    {{/if}}
                </form>
            </div>
        </div>
    </div>

    <div id="toast" class="alert alert-success text-center d-none" role="alert" style="position: fixed; top: 20px; right: 20px;">
    
    </div>


    <div class="col-sm-12 col-md-12 col-lg-4 col-xl-6 tm-block-col mt-5">
        {{#if success}}
            <div id="success" class="alert alert-success">{{success}}</div>
        {{/if}}

        {{#if error}}
            <div id="error" class="alert alert-danger">{{error}}</div>
        {{/if}}

        <div class="tm-bg-primary-dark tm-block tm-block-product-categories">
        <h2 class="tm-block-title">Product Categories</h2>
        <div class="tm-product-table-container">
            <table class="table tm-table-small tm-product-table">
            <tbody>
                {{#each categories}}
                <tr>
                    <td class="tm-product-name col-9">{{this.name}}</td>
                    <td class="text-center">
                        <a href="#" class="tm-product-delete-link" data-toggle="modal" data-target="#modalEdit"  data-id="{{this._id}}">
                            <i class="far fa-edit tm-product-delete-icon" ></i>
                        </a>
                    </td>
                    <td class="text-center">
                        <a href="#" class="tm-product-delete-link" data-toggle="modal" data-target="#modalDelete"  data-id="{{this._id}}">
                            <i class="far fa-trash-alt tm-product-delete-icon"></i>
                        </a>
                    </td>
                </tr>
                {{/each}}
            </tbody>
            </table>
        </div>
        <!-- table container -->
        <button id="btn-create" class="btn btn-primary btn-block text-uppercase mb-3 " data-toggle="modal" data-target="#modalCreate">
            Add new category
        </button>
        </div>
    </div>
</div>

<form id="deleteForm" method="post"></form>
<script>

    const alertSuccess = document.getElementById('success')
    if(alertSuccess != undefined){
        setTimeout(() => {
            alertSuccess.style.display = 'none'
        }, 1000)
    }

    const alertError = document.getElementById('error')
    if(alertError != undefined){
        setTimeout(() => {
            alertError.style.display = 'none'
        }, 1000)
    }

    document.addEventListener('DOMContentLoaded', function(){

        // edit
        var categoryId
        var editForm = document.getElementById('editForm')
        var btnSubmit = document.getElementById('btnEdit')
        var alert = document.getElementsByClassName('alert')[0]

        const toast = document.getElementById('toast');
        const msg = localStorage.getItem('toastMsg');

        const formCreate = document.getElementById('formCreate')
       
        
        formCreate.addEventListener('submit', function(e){
            e.preventDefault()
            const inputName = document.getElementById('nameCreate')
            if(inputName.value == null || inputName.value == ''){
                alert.style.display = 'block'
            }     
            else{
                const data = { name: inputName.value };
                submitFormData(data)
            }
        })

        async function submitFormData(data){
            try{
                const response = await fetch('http://localhost:3000/category', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data),
                    credentials: 'include',
                })
                if(response.ok){
                    const result = await response.json()
                    localStorage.setItem('toastMsg', result.msg)
                    window.location.href = 'http://localhost:8080/category';
                }else{
                    const errorMessage = await response.json();
                    alert.textContent = errorMessage.msg || 'Có lỗi xảy ra';
                    alert.style.display = 'block';
                }
            }catch(error){
                console.error("Fetch error: ", error);
                alert.textContent = 'An error occurred. Please try again.';
                alert.style.display = 'block';
            }
        }


        $('#modalEdit').on('show.bs.modal', function(event){
            var button = $(event.relatedTarget)
            categoryId = button.data('id')
        })

        //btnSubmit.onclick = function(){
        //    editForm.action = '/category/' + categoryId + '?_method=PUT'
        //    console.log(editForm.action)
        //    editForm.submit()
        //}

        editForm.addEventListener('submit', function(e){
            e.preventDefault()
            
            const editName = document.getElementById('exampleInputEmail1')
            if(editName.value == null || editName.value == ''){
                alert.style.display = 'block'
            }     
            else{
                const data = { name: editName.value };
                submitEditFormData(data)
            }
        })


        async function submitEditFormData(data){
            try{
                const response = await fetch(`http://localhost:3000/category/${categoryId}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data),
                    credentials: 'include',
                })
                if(response.ok){
                    const result = await response.json()
                    localStorage.setItem('toastMsg', result.msg)
                    window.location.href = 'http://localhost:8080/category';
                }else{
                    const errorMessage = await response.json();
                    alert.textContent = errorMessage.msg || 'Có lỗi xảy ra';
                    alert.style.display = 'block';
                }
            }catch(error){
                console.error("Fetch error: ", error);
                alert.textContent = 'An error occurred. Please try again.';
                alert.style.display = 'block';
            }
        }


        //delete
        var deleteForm = document.getElementById('deleteForm')
        var btnDelete = document.getElementById('btnDelete')

        $('#modalDelete').on('show.bs.modal', function(event){
            var button = $(event.relatedTarget)
            categoryId = button.data('id')
        })
        
        //btnDelete.onclick = function(){
        //    deleteForm.action = '/category/' + categoryId + '?_method=DELETE'
        //    deleteForm.submit()
        //}

        btnDelete.onclick = async function(){
            try{
                const response =  await fetch(`http://localhost:3000/category/${categoryId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    credentials: 'include',

                })

                if(response.ok){
                    const result = await response.json()
                    localStorage.setItem('toastMsg', result.msg)
                    window.location.href = 'http://localhost:8080/category';
                }else{
                    const errorMessage = await response.text();
                    alert.textContent = errorMessage || 'Có lỗi xảy ra';
                    alert.style.display = 'block';
                }    
            }catch(error){
                console.error("Fetch error: ", error);
                alert.textContent = 'Có lỗi xảy ra';
                alert.style.display = 'block';
            }
        
        }



        if (msg) {
        
            toast.textContent = msg;
            toast.classList.remove('d-none'); 

            setTimeout(() => {
                toast.classList.add('d-none'); 
                localStorage.removeItem('toastMsg');
            }, 2000);
        }


    })


</script>    